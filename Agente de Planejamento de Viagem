{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1Q-tlQvMeoYq6Y7EHfh_qRlw9-J2hHy-G","timestamp":1747491240061},{"file_id":"1RcpYRQu2QbEhYLUjxWf0LCcnXENqEnpJ","timestamp":1747480053061},{"file_id":"1JvMd5qKbIRaaypwC5gozr4UPURh3qqsQ","timestamp":1747477079031},{"file_id":"1-68zX4PF5qTjmAP_yT6yObV4Tr5q_LpR","timestamp":1745950008315}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["%pip -q install google-genai"],"metadata":{"id":"UCCbECexLk_h","executionInfo":{"status":"ok","timestamp":1747519560569,"user_tz":180,"elapsed":3359,"user":{"displayName":"Edneu Martins","userId":"06205742086144961872"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["# Configura a API Key do Google Gemini\n","\n","import os\n","from google.colab import userdata\n","\n","os.environ[\"GOOGLE_API_KEY\"] = userdata.get('GOOGLE_API_KEY')"],"metadata":{"id":"NfCqHo1tLk8P","executionInfo":{"status":"ok","timestamp":1747519564111,"user_tz":180,"elapsed":462,"user":{"displayName":"Edneu Martins","userId":"06205742086144961872"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["# Configura o cliente da SDK do Gemini\n","\n","from google import genai\n","\n","client = genai.Client()\n","\n","MODEL_ID = \"gemini-2.0-flash\""],"metadata":{"id":"bV4w0H5TLk5g","executionInfo":{"status":"ok","timestamp":1747519566597,"user_tz":180,"elapsed":274,"user":{"displayName":"Edneu Martins","userId":"06205742086144961872"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["# Melhora a Resposta da IA, escrita e HTML\n","\n","from IPython.display import HTML, Markdown\n","\n"],"metadata":{"id":"HwVP7Xi34Zuw","executionInfo":{"status":"ok","timestamp":1747519569891,"user_tz":180,"elapsed":10,"user":{"displayName":"Edneu Martins","userId":"06205742086144961872"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["# Instalar Framework ADK de agentes do Google ################################################\n","\n","!pip install -q google-adk"],"metadata":{"id":"hvZ3UnPI4jhJ","collapsed":true,"executionInfo":{"status":"ok","timestamp":1747519596974,"user_tz":180,"elapsed":4281,"user":{"displayName":"Edneu Martins","userId":"06205742086144961872"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","execution_count":25,"metadata":{"id":"aePV2bdfDeoW","executionInfo":{"status":"ok","timestamp":1747519598605,"user_tz":180,"elapsed":14,"user":{"displayName":"Edneu Martins","userId":"06205742086144961872"}}},"outputs":[],"source":["from google.adk.agents import Agent\n","from google.adk.runners import Runner\n","from google.adk.sessions import InMemorySessionService\n","from google.adk.tools import google_search\n","from google.genai import types  # Para criar conteúdos (Content e Part)\n","from datetime import date\n","import textwrap # Para formatar melhor a saída de texto\n","from IPython.display import display, Markdown # Para exibir texto formatado no Colab\n","import requests # Para fazer requisições HTTP\n","import warnings\n","\n","warnings.filterwarnings(\"ignore\")"]},{"cell_type":"code","source":["# Função auxiliar que envia uma mensagem para um agente via Runner e retorna a resposta final\n","def call_agent(agent: Agent, message_text: str) -> str:\n","    # Cria um serviço de sessão em memória\n","    session_service = InMemorySessionService()\n","    # Cria uma nova sessão (você pode personalizar os IDs conforme necessário)\n","    session = session_service.create_session(app_name=agent.name, user_id=\"user1\", session_id=\"session1\")\n","    # Cria um Runner para o agente\n","    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)\n","    # Cria o conteúdo da mensagem de entrada\n","    content = types.Content(role=\"user\", parts=[types.Part(text=message_text)])\n","\n","    final_response = \"\"\n","    # Itera assincronamente pelos eventos retornados durante a execução do agente\n","    for event in runner.run(user_id=\"user1\", session_id=\"session1\", new_message=content):\n","        if event.is_final_response():\n","          for part in event.content.parts:\n","            if part.text is not None:\n","              final_response += part.text\n","              final_response += \"\\n\"\n","    return final_response"],"metadata":{"id":"_xP4lWhsS5ko","executionInfo":{"status":"ok","timestamp":1747519602431,"user_tz":180,"elapsed":22,"user":{"displayName":"Edneu Martins","userId":"06205742086144961872"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["# Função auxiliar para exibir texto formatado em Markdown no Colab\n","def to_markdown(text):\n","  text = text.replace('•', '  *')\n","  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))"],"metadata":{"id":"8dosiodaxfFR","executionInfo":{"status":"ok","timestamp":1747519606069,"user_tz":180,"elapsed":6,"user":{"displayName":"Edneu Martins","userId":"06205742086144961872"}}},"execution_count":27,"outputs":[]},{"cell_type":"code","source":["################################################\n","# --- Agente 1: Buscador de Roteiros de Viagem #\n","################################################\n","\n","def agente_buscador(local_viagem, data_viagem_1, data_viagem_2):\n","    buscador = Agent(\n","        name=\"agente_buscador\",\n","        model=\"gemini-2.0-flash\",\n","        instruction=f\"\"\"\n","            Você é um espcialista em roteiros de Viagem pelo mundo inteiro. A sua tarefa é usar a ferramenta de busca do google (google_search)\n","            para recuperar os melhores roteiros de viagem, segundo o local indicado pelo cliente {local_viagem}, com melhres ofertas de preço e\n","            no intervalo de datas solicitada pelo Cliente {data_viagem_1} e {data_viagem_2}, você deve trazer 3 (três) propostas de roteiro detalhado e o\n","            cliente a posteriore escolherá a melhor.\n","            \"\"\",\n","        description=\"Agente que busca informações no Google\",\n","        tools=[google_search]\n","    )\n","\n","    entrada_do_agente_buscador = f\"Local Viagem: {local_viagem}\\nData Inicial Viagem: {data_viagem_1}\\nData Final Viagem: {data_viagem_2}\"\n","\n","    roteiros = call_agent(buscador, entrada_do_agente_buscador)\n","\n","    return roteiros\n"],"metadata":{"id":"o8bqIfi_DyH8","executionInfo":{"status":"ok","timestamp":1747519610193,"user_tz":180,"elapsed":8,"user":{"displayName":"Edneu Martins","userId":"06205742086144961872"}}},"execution_count":28,"outputs":[]},{"cell_type":"code","source":["################################################\n","# --- Agente 2: Escolha do Roteiro de Viagem #\n","################################################\n","\n","def agente_escolha(roteiro_viagem, roteiros_buscados):\n","    escolha = Agent(\n","        name=\"agente_escolha\",\n","        model=\"gemini-2.0-flash\",\n","        instruction=f\"\"\"\n","            Pegue o Roteiro que o cliente definiu na pesquisa anterior usando {roteiro_viagem} e detalhe mas cada passeio, colocando as rotas,\n","            com imagens do Google Maps, se possivel colocar também as fotos dos locais visitados.\n","            \"\"\",\n","        description=\"Agente de Escolhe de Roteiro de Viagem\",\n","        tools=[google_search]\n","    )\n","\n","    entrada_do_agente_escolha = f\"Roteiro Escolhido: {roteiro_viagem}\\nRoteiros Propostos: {roteiros_buscados}\"\n","\n","    escolhido = call_agent(escolha, entrada_do_agente_escolha)\n","\n","    return escolhido\n",""],"metadata":{"id":"J5AswheVhquV","executionInfo":{"status":"ok","timestamp":1747519614467,"user_tz":180,"elapsed":16,"user":{"displayName":"Edneu Martins","userId":"06205742086144961872"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":["################################################\n","# -- Agente 3: Escolha de Restarurantes Viagem #\n","################################################\n","\n","def agente_restaurante(roteiros_buscados):\n","    restaurante = Agent(\n","        name=\"agente_restaurante\",\n","        model=\"gemini-2.0-flash\",\n","        instruction=f\"\"\"\n","            Pegue o Roteiro definido pelo cliente e no entorno dos passeio por ele definidos busque restaurantes da culinária local usando {roteiro_viagem} e\n","            descreva cada recinto, pesquise o ranking de qualidade e satisfação dos clientes na escala de \"1\" a \"10\", onde \"1\" é pessímo e \"10\" é excelente.\n","            \"\"\",\n","        description=\"Agente de Restaurante nos Passeios\",\n","        tools=[google_search]\n","    )\n","\n","    entrada_do_agente_restaurante = f\"Roteiros Propostos: {roteiros_buscados}\"\n","\n","    restaurantes = call_agent(restaurante, entrada_do_agente_restaurante)\n","\n","    return restaurantes\n",""],"metadata":{"id":"FY5pVBM01MWX","executionInfo":{"status":"ok","timestamp":1747519617683,"user_tz":180,"elapsed":7,"user":{"displayName":"Edneu Martins","userId":"06205742086144961872"}}},"execution_count":30,"outputs":[]},{"cell_type":"code","source":["################################################\n","# -- Agente 4: Traçando Rotas para Passeios    #\n","################################################\n","\n","def agente_rotas(roteiros_buscados):\n","    rotas = Agent(\n","        name=\"agente_rota\",\n","        model=\"gemini-2.0-flash\",\n","        instruction=f\"\"\"\n","            Partindo do Roteiro definido pelo cliente {roteiro_viagem} encontre rotas para as visitas nos passeios, e faça sugestão de transporte, se possível transportes urbanos\n","            como ex.: (trens,metros,onibus,barcos e etc.), quando não for possível vamos de carro alugado. Coloque na pesquisa o valor dos carros nas locadoras e dos transposrtes\n","            públicos.\n","            \"\"\",\n","        description=\"Agente de Rotas nos Passeios\",\n","        tools=[google_search]\n","    )\n","\n","    entrada_do_agente_rotas = f\"Roteiros Propostos: {roteiros_buscados}\"\n","\n","    transportes = call_agent(rotas, entrada_do_agente_rotas)\n","\n","    return transportes\n",""],"metadata":{"id":"iMTVzZBB_-48","executionInfo":{"status":"ok","timestamp":1747519624644,"user_tz":180,"elapsed":39,"user":{"displayName":"Edneu Martins","userId":"06205742086144961872"}}},"execution_count":31,"outputs":[]},{"cell_type":"code","source":["################################################\n","# -- Agente 5: Escolhendo Visitas Inesqueciveis#\n","################################################\n","\n","def agente_inesqueciveis(local_viagem):\n","    inesqueciveis = Agent(\n","        name=\"agente_visita\",\n","        model=\"gemini-2.0-flash\",\n","        instruction=f\"\"\"\n","            Partindo do Local escolhido {local_viagem}, me traga 3 (três) locais inesquecivéis que eu devo visitar a qualquer custo, suas histórias e seus souvenirs\n","            e particuliaridades do local.\n","            \"\"\",\n","        description=\"Agente de Visitas Inesquecivéis\",\n","        tools=[google_search]\n","    )\n","\n","    entrada_do_agente_visitas = f\"Local Viagem: {local_viagem}\"\n","\n","    inesqueciveis = call_agent(inesqueciveis, entrada_do_agente_visitas)\n","\n","    return inesqueciveis\n",""],"metadata":{"id":"k6umDlpxD_Jq","executionInfo":{"status":"ok","timestamp":1747519629329,"user_tz":180,"elapsed":33,"user":{"displayName":"Edneu Martins","userId":"06205742086144961872"}}},"execution_count":32,"outputs":[]},{"cell_type":"code","source":["################################################\n","# -- Agente 6: Escolhendo Passagens Aéreas     #\n","################################################\n","\n","def agente_aereas(local_viagem, local_residencia, data_viagem_1, data_viagem_2, roteiro_escolhido):\n","    aerea = Agent(\n","        name=\"agente_aerea\",\n","        model=\"gemini-2.0-flash\",\n","        instruction=f\"\"\"\n","            Partindo do local de residência {local_residencia} e local viagem {local_viagem}, localize o aeroporto mais próximo e crie um plano de voou entre as duas cidades nas\n","            datas inicil e data final, respectivamente {data_viagem_1} e {data_viagem_2}, depos com o roteiro escolhido, crie um plano de voou entre os pontos dos passeio que exijam\n","            transporte aereo, por fim preciso das passagens com horário e valores e aeroportos de saída e chegada.\n","            \"\"\",\n","        description=\"Agente de Passagens Aéreas\",\n","        tools=[google_search]\n","    )\n","\n","    entrada_do_agente_aereas = f\"Local Viagem: {local_viagem}\\nLocal Residência: {local_residencia}\\ndata Inicial Viagem: {data_viagem_1}\\nData Final Viagem: {data_viagem_2}\\nRoteiro Escolhido: {roteiro_escolhido}\"\n","\n","    aereas = call_agent(aerea, entrada_do_agente_aereas)\n","\n","    return aereas\n",""],"metadata":{"id":"k86H9E30LLke","executionInfo":{"status":"ok","timestamp":1747519633837,"user_tz":180,"elapsed":7,"user":{"displayName":"Edneu Martins","userId":"06205742086144961872"}}},"execution_count":33,"outputs":[]},{"cell_type":"code","source":["################################################\n","# -- Agente 7: Escolhendo Hoteis               #\n","################################################\n","\n","def agente_hoteis(roteiro_escolhido):\n","    hotel = Agent(\n","        name=\"agente_hotel\",\n","        model=\"gemini-2.0-flash\",\n","        instruction=f\"\"\"\n","            Partindo do roteiro escolhido {roteiro_escolhido}, defina os melhores hoteis em cada região, melhor custo beneficio, proximidade de metro, trens e do centro da cidade\n","            \"\"\",\n","        description=\"Agente de Hoteis\",\n","        tools=[google_search]\n","    )\n","\n","    entrada_do_agente_hoteis = f\"Roteiro Escolhido: {roteiro_escolhido}\"\n","\n","    hoteis = call_agent(hotel, entrada_do_agente_hoteis)\n","\n","    return hoteis\n",""],"metadata":{"id":"vUz0-w55TF4K","executionInfo":{"status":"ok","timestamp":1747520153212,"user_tz":180,"elapsed":8,"user":{"displayName":"Edneu Martins","userId":"06205742086144961872"}}},"execution_count":35,"outputs":[]},{"cell_type":"code","source":["print(\"🚀 Iniciando o Sistema de Criação de Roteiros de Viagem 🚀\")\n","\n","from datetime import date, timedelta\n","\n","# Obtém a data atual\n","data_atual = date.today()\n","\n","# Define o período de tempo a ser adicionado (10 dias)\n","dez_dias = timedelta(days=10)\n","\n","# Soma os 10 dias à data final da Viagem\n","data_final = data_atual + dez_dias\n","\n","# Formata a data Final da Viagem\n","data_viagem_2 = data_final.strftime(\"%d/%m/%Y\")\n","\n","local_residencia = input(\"❓ Por favor, digite o Local de Saída: \")\n","if not local_residencia:\n","    local_viagem = \"Brasil\"\n","else:\n","   print(f\"Muito bom! Partimos daqui!: {local_residencia}\")\n","\n","local_viagem = input(\"❓ Por favor, digite o Local de Destino da Viagem: \")\n","if not local_viagem:\n","    local_viagem = \"Brasil\"\n","else:\n","   print(f\"Excelente! Vamos buscar o melhor roteiro: {local_viagem}\")\n","\n","data_viagem_1 = input(\"❓ Por favor, digite a data Inicial da Viagem: \")\n","if not data_viagem_1:\n","   data_viagem_1 = data_atual.strftime(\"%d/%m/%Y\")\n","else:\n","   print(f\"Excelente! É uma ótima escolha para iniciar o roteiro: {data_viagem_1}\")\n","\n","data_viagem_2 = input(\"❓ Por favor, digite a data Final da Viagem: \")\n","if not data_viagem_2:\n","   data_viagem_2 = data_final.strftime(\"%d/%m/%Y\")\n","else:\n","   print(f\"Excelente! Agora podemos buscar os 3 (três) melhores roteiros para: {local_viagem}\")\n","\n","\n","roteiros_buscados = agente_buscador(local_viagem, data_viagem_1, data_viagem_2)\n","\n","print(\"\\n--- Resultado do Agente 1 (Buscador) ---\\n\")\n","\n","display(to_markdown(roteiros_buscados))\n","print(\"------------------------------------------------\")\n","\n","\n","# --- Obter o Roteiro Escolhido para Viagem ---#\n","\n","roteiro_viagem = \" \"\n","\n","print(f\"DEBUG: Iniciando agente_escolha com: {roteiro_viagem}\")\n","roteiro_viagem = input(\"❓ Qual o melhor roteiro para sua Viagem: \")\n","\n","\n","roteiro_escolhido = agente_escolha(roteiro_viagem, roteiros_buscados)\n","\n","print(\"\\n--- Resultado do Agente 2 (Escolha) ---\\n\")\n","\n","display(to_markdown(roteiro_escolhido))\n","print(\"------------------------------------------------\")\n","\n","\n","# --- Obter o Roteiro Restaurante nos Passeios ---#\n","\n","restaurantes_viagem = \"\"\n","\n","restaurantes_viagem = agente_restaurante(roteiros_buscados)\n","\n","print(\"\\n--- Resultado do Agente 3 (Restaurantes) ---\\n\")\n","\n","display(to_markdown(restaurantes_viagem))\n","print(\"------------------------------------------------\")\n","\n","\n","# --- Obter o Rotas e Transportes nos Passeios ---#\n","\n","rotas_passeio = \"\"\n","\n","rotas_passeio = agente_rotas(roteiros_buscados)\n","\n","print(\"\\n--- Resultado do Agente 4 (Rotas) ---\\n\")\n","\n","display(to_markdown(rotas_passeio))\n","print(\"------------------------------------------------\")\n","\n","\n","# --- Obter o Rotas e Transportes nos Passeios ---#\n","\n","visitas_inesqueciveis = agente_inesqueciveis(local_viagem)\n","\n","print(\"\\n--- Resultado do Agente 5 (Inesqueciveis) ---\\n\")\n","\n","display(to_markdown(visitas_inesqueciveis))\n","print(\"------------------------------------------------\")\n","\n","\n","# --- Obter o Passagens Aéreas ---#\n","\n","passagens_aereas = agente_aereas(local_viagem, local_residencia, data_viagem_1, data_viagem_2, roteiro_escolhido)\n","\n","print(\"\\n--- Resultado do Agente 6 (Aéreas) ---\\n\")\n","\n","display(to_markdown(passagens_aereas))\n","print(\"------------------------------------------------\")\n","\n","# --- Obter o Hoteis ---#\n","\n","hospedagem_hoteis = agente_hoteis(roteiro_escolhido)\n","\n","print(\"\\n--- Resultado do Agente 7 (Hoteís) ---\\n\")\n","\n","display(to_markdown(hospedagem_hoteis))\n","print(\"------------------------------------------------\")\n","\n"],"metadata":{"id":"630ummxz4myx","collapsed":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"uNcKBGTfhT1a"},"execution_count":null,"outputs":[]}]}